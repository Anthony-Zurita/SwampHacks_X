{"ast":null,"code":"import fs from \"fs\";\nimport path from \"path\";\nimport OpenAI from \"openai\";\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      error: \"Method not allowed\"\n    });\n  }\n  const {\n    text\n  } = req.body;\n  if (!text) {\n    return res.status(400).json({\n      error: \"Text is required\"\n    });\n  }\n  try {\n    const mp3 = await openai.audio.speech.create({\n      model: \"tts-1\",\n      voice: \"alloy\",\n      input: text\n    });\n    const buffer = Buffer.from(await mp3.arrayBuffer());\n\n    // Save the file to a temporary directory\n    const filePath = path.join(process.cwd(), \"public\", \"speech.mp3\");\n    fs.writeFileSync(filePath, buffer);\n    res.status(200).json({\n      url: `/speech.mp3`\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: \"Error generating audio\"\n    });\n  }\n}","map":{"version":3,"names":["fs","path","OpenAI","openai","apiKey","process","env","OPENAI_API_KEY","handler","req","res","method","status","json","error","text","body","mp3","audio","speech","create","model","voice","input","buffer","Buffer","from","arrayBuffer","filePath","join","cwd","writeFileSync","url","console"],"sources":["/Users/leonardocobaleda/Documents/GitHub/Hackathon/Untitled/src/components/api/TextToSpeech.js"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({ error: \"Method not allowed\" });\n  }\n\n  const { text } = req.body;\n\n  if (!text) {\n    return res.status(400).json({ error: \"Text is required\" });\n  }\n\n  try {\n    const mp3 = await openai.audio.speech.create({\n      model: \"tts-1\",\n      voice: \"alloy\",\n      input: text,\n    });\n\n    const buffer = Buffer.from(await mp3.arrayBuffer());\n\n    // Save the file to a temporary directory\n    const filePath = path.join(process.cwd(), \"public\", \"speech.mp3\");\n    fs.writeFileSync(filePath, buffer);\n\n    res.status(200).json({ url: `/speech.mp3` });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: \"Error generating audio\" });\n  }\n}\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;AAEF,eAAe,eAAeC,OAAOA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC9C,IAAID,GAAG,CAACE,MAAM,KAAK,MAAM,EAAE;IACzB,OAAOD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAqB,CAAC,CAAC;EAC9D;EAEA,MAAM;IAAEC;EAAK,CAAC,GAAGN,GAAG,CAACO,IAAI;EAEzB,IAAI,CAACD,IAAI,EAAE;IACT,OAAOL,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAmB,CAAC,CAAC;EAC5D;EAEA,IAAI;IACF,MAAMG,GAAG,GAAG,MAAMd,MAAM,CAACe,KAAK,CAACC,MAAM,CAACC,MAAM,CAAC;MAC3CC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAER;IACT,CAAC,CAAC;IAEF,MAAMS,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAC,MAAMT,GAAG,CAACU,WAAW,CAAC,CAAC,CAAC;;IAEnD;IACA,MAAMC,QAAQ,GAAG3B,IAAI,CAAC4B,IAAI,CAACxB,OAAO,CAACyB,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC;IACjE9B,EAAE,CAAC+B,aAAa,CAACH,QAAQ,EAAEJ,MAAM,CAAC;IAElCd,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEmB,GAAG,EAAE;IAAc,CAAC,CAAC;EAC9C,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACdmB,OAAO,CAACnB,KAAK,CAACA,KAAK,CAAC;IACpBJ,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC3D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}