{"ast":null,"code":"var _jsxFileName = \"/Users/leonardocobaleda/Documents/GitHub/Hackathon/Untitled/src/pages/TextToSpeechDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextToSpeechDashboard = () => {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!inputText) return alert(\"Please enter some text.\");\n    setIsProcessing(true);\n    try {\n      const response = await fetch(\"api/text-to-speech\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: inputText\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to generate speech.\");\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n\n      // Play the audio\n      const audio = new Audio(url);\n      audio.play();\n    } catch (error) {\n      console.error(error);\n      alert(\"Error generating text-to-speech. Please try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 max-w-md mx-auto bg-white shadow rounded\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Text-to-Speech Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"w-full border p-2 rounded mb-4\",\n        rows: \"4\",\n        placeholder: \"Enter text to convert to speech\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `w-full bg-blue-500 text-white py-2 px-4 rounded ${isProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"}`,\n        disabled: isProcessing,\n        children: isProcessing ? \"Processing...\" : \"Convert to Speech\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TextToSpeechDashboard, \"n9Bp1fGyW12O4h9qyDejlNVSZ40=\");\n_c = TextToSpeechDashboard;\nexport default TextToSpeechDashboard;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeechDashboard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TextToSpeechDashboard","_s","inputText","setInputText","isProcessing","setIsProcessing","handleSubmit","event","preventDefault","alert","response","fetch","method","headers","body","JSON","stringify","text","ok","Error","blob","url","URL","createObjectURL","audio","Audio","play","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","rows","placeholder","value","onChange","e","target","type","disabled","_c","$RefreshReg$"],"sources":["/Users/leonardocobaleda/Documents/GitHub/Hackathon/Untitled/src/pages/TextToSpeechDashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst TextToSpeechDashboard = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (!inputText) return alert(\"Please enter some text.\");\n\n    setIsProcessing(true);\n\n    try {\n      const response = await fetch(\"api/text-to-speech\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ text: inputText }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to generate speech.\");\n\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n\n      // Play the audio\n      const audio = new Audio(url);\n      audio.play();\n    } catch (error) {\n      console.error(error);\n      alert(\"Error generating text-to-speech. Please try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"p-4 max-w-md mx-auto bg-white shadow rounded\">\n      <h2 className=\"text-xl font-bold mb-4\">Text-to-Speech Dashboard</h2>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          className=\"w-full border p-2 rounded mb-4\"\n          rows=\"4\"\n          placeholder=\"Enter text to convert to speech\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n        />\n        <button\n          type=\"submit\"\n          className={`w-full bg-blue-500 text-white py-2 px-4 rounded ${\n            isProcessing ? \"opacity-50 cursor-not-allowed\" : \"\"\n          }`}\n          disabled={isProcessing}\n        >\n          {isProcessing ? \"Processing...\" : \"Convert to Speech\"}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default TextToSpeechDashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMS,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,CAACN,SAAS,EAAE,OAAOO,KAAK,CAAC,yBAAyB,CAAC;IAEvDJ,eAAe,CAAC,IAAI,CAAC;IAErB,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;QACjDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAEf;QAAU,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAI,CAACQ,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAE/D,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;;MAErC;MACA,MAAMI,KAAK,GAAG,IAAIC,KAAK,CAACJ,GAAG,CAAC;MAC5BG,KAAK,CAACE,IAAI,CAAC,CAAC;IACd,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBlB,KAAK,CAAC,oDAAoD,CAAC;IAC7D,CAAC,SAAS;MACRJ,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEN,OAAA;IAAK8B,SAAS,EAAC,8CAA8C;IAAAC,QAAA,gBAC3D/B,OAAA;MAAI8B,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpEnC,OAAA;MAAMoC,QAAQ,EAAE7B,YAAa;MAAAwB,QAAA,gBAC3B/B,OAAA;QACE8B,SAAS,EAAC,gCAAgC;QAC1CO,IAAI,EAAC,GAAG;QACRC,WAAW,EAAC,iCAAiC;QAC7CC,KAAK,EAAEpC,SAAU;QACjBqC,QAAQ,EAAGC,CAAC,IAAKrC,YAAY,CAACqC,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACFnC,OAAA;QACE2C,IAAI,EAAC,QAAQ;QACbb,SAAS,EAAE,mDACTzB,YAAY,GAAG,+BAA+B,GAAG,EAAE,EAClD;QACHuC,QAAQ,EAAEvC,YAAa;QAAA0B,QAAA,EAEtB1B,YAAY,GAAG,eAAe,GAAG;MAAmB;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACjC,EAAA,CA1DID,qBAAqB;AAAA4C,EAAA,GAArB5C,qBAAqB;AA4D3B,eAAeA,qBAAqB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}